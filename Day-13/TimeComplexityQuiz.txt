1) What is the time, and space complexity of the following code: 


int a = 0, b = 0;
for (i = 0; i < N; i++) {
    a = a + Math.random();
}
for (j = 0; j < M; j++) {
    b = b + Math.random();
}

Answer: O(N + M) time, O(1) space
-----

2) What is the time complexity of the following code:


int a = 0;
for (i = 0; i < N; i++) {
    for (j = N; j > i; j--) {
        a = a + i + j;
    }
}

Explanation: 
-----------
The above code runs total no of times 
= N + (N – 1) + (N – 2) + … 1 + 0 
= N * (N + 1) / 2 
= 1/2 * N^2 + 1/2 * N 
O(N^2) times.

3. What is the time complexity of the following code: 


int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
    for (j = 2; j <= n; j = j * 2) {
        k = k + n / 2;
    }
}

Explanation:
-----------

O(n/ 2 * log (n)) = O(n*logn)

4. What does it mean when we say that an algorithm X is asymptotically more efficient than Y? 
Options: 
 

X will always be a better choice for small inputs
X will always be a better choice for large inputs
Y will always be a better choice for small inputs
X will always be a better choice for all inputs

Output: X will always be a better choice for large inputs
------

5. What is the time complexity of the following code:


int a = 0, i = N;
while (i > 0) {
    a += i;
    i /= 2;
}

Output: O(log N)
------

6. Which of the following best describes the useful criterion for comparing the efficiency of algorithms?

Time
Memory
Both of the above
None of the above

Answer: all of the above
------

7. How is time complexity measured?

By counting the number of algorithms in an algorithm.
By counting the number of primitive operations performed by the algorithm on a given input size.
By counting the size of data input to the algorithm.
None of the above

Answer:
------       By counting the number of primitive operations performed by the algorithm on a given input size.

8. What will be the time complexity of the following code?


for(int i=0;i<n;i++){
i*=k;
}

Output: O(logkn)
------
9. What will be the time complexity of the following code?


int value = 0;
for(int i=0;i<n;i++)
    for(int j=0;j<i;j++)
    value += 1;

Output: n(n-1)
------

10.  Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A.

True
False

Answer: False
-----